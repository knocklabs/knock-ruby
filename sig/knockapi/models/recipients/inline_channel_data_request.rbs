module Knockapi
  module Models
    module Recipients
      type inline_channel_data_request_item =
        Knockapi::Recipients::InlineChannelDataRequestItem::PushChannelDataTokensOnly
        | Knockapi::Recipients::InlineChannelDataRequestItem::AwssnsPushChannelDataTargetArNsOnly
        | Knockapi::Recipients::InlineChannelDataRequestItem::OneSignalChannelDataPlayerIDsOnly
        | Knockapi::Recipients::SlackChannelData
        | Knockapi::Recipients::MsTeamsChannelData
        | Knockapi::Recipients::DiscordChannelData

      module InlineChannelDataRequestItem
        extend Knockapi::Internal::Type::Union

        type push_channel_data_tokens_only = { tokens: ::Array[String] }

        class PushChannelDataTokensOnly < Knockapi::Internal::Type::BaseModel
          attr_accessor tokens: ::Array[String]

          def initialize: (tokens: ::Array[String]) -> void

          def to_hash: -> { tokens: ::Array[String] }
        end

        type awssns_push_channel_data_target_ar_ns_only =
          { target_arns: ::Array[String] }

        class AwssnsPushChannelDataTargetArNsOnly < Knockapi::Internal::Type::BaseModel
          attr_accessor target_arns: ::Array[String]

          def initialize: (target_arns: ::Array[String]) -> void

          def to_hash: -> { target_arns: ::Array[String] }
        end

        type one_signal_channel_data_player_ids_only =
          { player_ids: ::Array[String] }

        class OneSignalChannelDataPlayerIDsOnly < Knockapi::Internal::Type::BaseModel
          attr_accessor player_ids: ::Array[String]

          def initialize: (player_ids: ::Array[String]) -> void

          def to_hash: -> { player_ids: ::Array[String] }
        end

        def self?.variants: -> ::Array[Knockapi::Models::Recipients::inline_channel_data_request_item]
      end

      type inline_channel_data_request =
        ::Hash[Symbol, Knockapi::Models::Recipients::inline_channel_data_request_item]

      InlineChannelDataRequest: Knockapi::Internal::Type::Converter
    end
  end
end
