module Knockapi
  module Models
    module Recipients
      type slack_channel_data =
        {
          connections: ::Array[Knockapi::Recipients::SlackChannelData::connection],
          token: Knockapi::Recipients::SlackChannelData::Token?
        }

      class SlackChannelData < Knockapi::Internal::Type::BaseModel
        attr_accessor connections: ::Array[Knockapi::Recipients::SlackChannelData::connection]

        attr_accessor token: Knockapi::Recipients::SlackChannelData::Token?

        def initialize: (
          connections: ::Array[Knockapi::Recipients::SlackChannelData::connection],
          ?token: Knockapi::Recipients::SlackChannelData::Token?
        ) -> void

        type connection =
          Knockapi::Recipients::SlackChannelData::Connection::SlackTokenConnection
          | Knockapi::Recipients::SlackChannelData::Connection::SlackIncomingWebhookConnection

        module Connection
          extend Knockapi::Internal::Type::Union

          type slack_token_connection =
            { access_token: String?, channel_id: String?, user_id: String? }

          class SlackTokenConnection < Knockapi::Internal::Type::BaseModel
            attr_accessor access_token: String?

            attr_accessor channel_id: String?

            attr_accessor user_id: String?

            def initialize: (
              ?access_token: String?,
              ?channel_id: String?,
              ?user_id: String?
            ) -> void
          end

          type slack_incoming_webhook_connection = { url: String }

          class SlackIncomingWebhookConnection < Knockapi::Internal::Type::BaseModel
            attr_accessor url: String

            def initialize: (url: String) -> void
          end

          def self?.variants: -> ::Array[Knockapi::Recipients::SlackChannelData::connection]
        end

        type token = { access_token: String? }

        class Token < Knockapi::Internal::Type::BaseModel
          attr_accessor access_token: String?

          def initialize: (access_token: String?) -> void
        end
      end
    end
  end
end
