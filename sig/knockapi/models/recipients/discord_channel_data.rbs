module Knockapi
  module Models
    module Recipients
      type discord_channel_data =
        {
          connections: ::Array[Knockapi::Models::Recipients::DiscordChannelData::connection]
        }

      class DiscordChannelData < Knockapi::Internal::Type::BaseModel
        attr_accessor connections: ::Array[Knockapi::Models::Recipients::DiscordChannelData::connection]

        def initialize: (
          connections: ::Array[Knockapi::Models::Recipients::DiscordChannelData::connection]
        ) -> void

        def to_hash: -> Knockapi::Models::Recipients::discord_channel_data

        type connection =
          Knockapi::Models::Recipients::DiscordChannelData::Connection::ChannelConnection
          | Knockapi::Models::Recipients::DiscordChannelData::Connection::IncomingWebhookConnection

        module Connection
          extend Knockapi::Internal::Type::Union

          type channel_connection = { channel_id: String }

          class ChannelConnection < Knockapi::Internal::Type::BaseModel
            attr_accessor channel_id: String

            def initialize: (channel_id: String) -> void

            def to_hash: -> Knockapi::Models::Recipients::DiscordChannelData::Connection::channel_connection
          end

          type incoming_webhook_connection = { url: String }

          class IncomingWebhookConnection < Knockapi::Internal::Type::BaseModel
            attr_accessor url: String

            def initialize: (url: String) -> void

            def to_hash: -> Knockapi::Models::Recipients::DiscordChannelData::Connection::incoming_webhook_connection
          end

          def self?.variants: -> [Knockapi::Models::Recipients::DiscordChannelData::Connection::ChannelConnection, Knockapi::Models::Recipients::DiscordChannelData::Connection::IncomingWebhookConnection]
        end
      end
    end
  end
end
