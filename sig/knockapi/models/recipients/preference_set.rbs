module Knockapi
  module Models
    module Recipients
      type preference_set =
        {
          id: String,
          categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::category]?,
          channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
          workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::workflow]?
        }

      class PreferenceSet < Knockapi::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::category]?

        attr_accessor channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?

        attr_accessor workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::workflow]?

        def initialize: (
          id: String,
          ?categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::category]?,
          ?channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
          ?workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::workflow]?
        ) -> void

        def to_hash: -> {
          id: String,
          categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::category]?,
          channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
          workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSet::workflow]?
        }

        type category =
          bool
          | Knockapi::Recipients::PreferenceSet::Category::PreferenceSetWorkflowCategorySettingObject

        module Category
          extend Knockapi::Internal::Type::Union

          type preference_set_workflow_category_setting_object =
            {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }

          class PreferenceSetWorkflowCategorySettingObject < Knockapi::Internal::Type::BaseModel
            attr_accessor channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?

            attr_accessor conditions: ::Array[Knockapi::Condition]?

            def initialize: (
              ?channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              ?conditions: ::Array[Knockapi::Condition]?
            ) -> void

            def to_hash: -> {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }
          end

          def self?.variants: -> ::Array[Knockapi::Models::Recipients::PreferenceSet::category]
        end

        type workflow =
          bool
          | Knockapi::Recipients::PreferenceSet::Workflow::PreferenceSetWorkflowCategorySettingObject

        module Workflow
          extend Knockapi::Internal::Type::Union

          type preference_set_workflow_category_setting_object =
            {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }

          class PreferenceSetWorkflowCategorySettingObject < Knockapi::Internal::Type::BaseModel
            attr_accessor channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?

            attr_accessor conditions: ::Array[Knockapi::Condition]?

            def initialize: (
              ?channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              ?conditions: ::Array[Knockapi::Condition]?
            ) -> void

            def to_hash: -> {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }
          end

          def self?.variants: -> ::Array[Knockapi::Models::Recipients::PreferenceSet::workflow]
        end
      end
    end
  end
end
