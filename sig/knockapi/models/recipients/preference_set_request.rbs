module Knockapi
  module Models
    module Recipients
      type preference_set_request =
        {
          _persistence_strategy: Knockapi::Models::Recipients::PreferenceSetRequest::persistence_strategy,
          categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::category]?,
          channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
          workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::workflow]?
        }

      class PreferenceSetRequest < Knockapi::Internal::Type::BaseModel
        attr_reader _persistence_strategy: Knockapi::Models::Recipients::PreferenceSetRequest::persistence_strategy?

        def _persistence_strategy=: (
          Knockapi::Models::Recipients::PreferenceSetRequest::persistence_strategy
        ) -> Knockapi::Models::Recipients::PreferenceSetRequest::persistence_strategy

        attr_accessor categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::category]?

        attr_accessor channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?

        attr_accessor workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::workflow]?

        def initialize: (
          ?_persistence_strategy: Knockapi::Models::Recipients::PreferenceSetRequest::persistence_strategy,
          ?categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::category]?,
          ?channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
          ?workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::workflow]?
        ) -> void

        def to_hash: -> {
          _persistence_strategy: Knockapi::Models::Recipients::PreferenceSetRequest::persistence_strategy,
          categories: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::category]?,
          channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
          workflows: ::Hash[Symbol, Knockapi::Models::Recipients::PreferenceSetRequest::workflow]?
        }

        type persistence_strategy = :merge | :replace

        module PersistenceStrategy
          extend Knockapi::Internal::Type::Enum

          MERGE: :merge
          REPLACE: :replace

          def self?.values: -> ::Array[Knockapi::Models::Recipients::PreferenceSetRequest::persistence_strategy]
        end

        type category =
          bool
          | Knockapi::Recipients::PreferenceSetRequest::Category::PreferenceSetWorkflowCategorySettingObject

        module Category
          extend Knockapi::Internal::Type::Union

          type preference_set_workflow_category_setting_object =
            {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }

          class PreferenceSetWorkflowCategorySettingObject < Knockapi::Internal::Type::BaseModel
            attr_accessor channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?

            attr_accessor conditions: ::Array[Knockapi::Condition]?

            def initialize: (
              ?channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              ?conditions: ::Array[Knockapi::Condition]?
            ) -> void

            def to_hash: -> {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }
          end

          def self?.variants: -> ::Array[Knockapi::Models::Recipients::PreferenceSetRequest::category]
        end

        type workflow =
          bool
          | Knockapi::Recipients::PreferenceSetRequest::Workflow::PreferenceSetWorkflowCategorySettingObject

        module Workflow
          extend Knockapi::Internal::Type::Union

          type preference_set_workflow_category_setting_object =
            {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }

          class PreferenceSetWorkflowCategorySettingObject < Knockapi::Internal::Type::BaseModel
            attr_accessor channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?

            attr_accessor conditions: ::Array[Knockapi::Condition]?

            def initialize: (
              ?channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              ?conditions: ::Array[Knockapi::Condition]?
            ) -> void

            def to_hash: -> {
              channel_types: Knockapi::Recipients::PreferenceSetChannelTypes?,
              conditions: ::Array[Knockapi::Condition]?
            }
          end

          def self?.variants: -> ::Array[Knockapi::Models::Recipients::PreferenceSetRequest::workflow]
        end
      end
    end
  end
end
