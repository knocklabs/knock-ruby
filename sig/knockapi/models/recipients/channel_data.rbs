module Knockapi
  module Models
    module Recipients
      type recipients_channel_data =
        {
          _typename: String,
          channel_id: String,
          data: Knockapi::Models::Recipients::RecipientsChannelData::data,
          provider: Knockapi::Models::Recipients::RecipientsChannelData::provider
        }

      class RecipientsChannelData < Knockapi::Internal::Type::BaseModel
        attr_accessor _typename: String

        attr_accessor channel_id: String

        attr_accessor data: Knockapi::Models::Recipients::RecipientsChannelData::data

        attr_reader provider: Knockapi::Models::Recipients::RecipientsChannelData::provider?

        def provider=: (
          Knockapi::Models::Recipients::RecipientsChannelData::provider
        ) -> Knockapi::Models::Recipients::RecipientsChannelData::provider

        def initialize: (
          _typename: String,
          channel_id: String,
          data: Knockapi::Models::Recipients::RecipientsChannelData::data,
          ?provider: Knockapi::Models::Recipients::RecipientsChannelData::provider
        ) -> void

        def to_hash: -> {
          _typename: String,
          channel_id: String,
          data: Knockapi::Models::Recipients::RecipientsChannelData::data,
          provider: Knockapi::Models::Recipients::RecipientsChannelData::provider
        }

        type data =
          Knockapi::Recipients::RecipientsChannelData::Data::PushChannelDataFull
          | Knockapi::Recipients::RecipientsChannelData::Data::AwssnsPushChannelDataFull
          | Knockapi::Recipients::RecipientsChannelData::Data::OneSignalChannelDataPlayerIDsOnly
          | Knockapi::Recipients::SlackChannelData
          | Knockapi::Recipients::MsTeamsChannelData
          | Knockapi::Recipients::DiscordChannelData

        module Data
          extend Knockapi::Internal::Type::Union

          type push_channel_data_full =
            {
              devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::PushChannelDataFull::Device],
              tokens: ::Array[String]
            }

          class PushChannelDataFull < Knockapi::Internal::Type::BaseModel
            attr_accessor devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::PushChannelDataFull::Device]

            attr_accessor tokens: ::Array[String]

            def initialize: (
              devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::PushChannelDataFull::Device],
              tokens: ::Array[String]
            ) -> void

            def to_hash: -> {
              devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::PushChannelDataFull::Device],
              tokens: ::Array[String]
            }

            type device = { token: String, locale: String?, timezone: String? }

            class Device < Knockapi::Internal::Type::BaseModel
              attr_accessor token: String

              attr_accessor locale: String?

              attr_accessor timezone: String?

              def initialize: (
                token: String,
                ?locale: String?,
                ?timezone: String?
              ) -> void

              def to_hash: -> {
                token: String,
                locale: String?,
                timezone: String?
              }
            end
          end

          type awssns_push_channel_data_full =
            {
              devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::AwssnsPushChannelDataFull::Device],
              target_arns: ::Array[String]
            }

          class AwssnsPushChannelDataFull < Knockapi::Internal::Type::BaseModel
            attr_accessor devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::AwssnsPushChannelDataFull::Device]

            attr_accessor target_arns: ::Array[String]

            def initialize: (
              devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::AwssnsPushChannelDataFull::Device],
              target_arns: ::Array[String]
            ) -> void

            def to_hash: -> {
              devices: ::Array[Knockapi::Recipients::RecipientsChannelData::Data::AwssnsPushChannelDataFull::Device],
              target_arns: ::Array[String]
            }

            type device =
              { target_arn: String, locale: String?, timezone: String? }

            class Device < Knockapi::Internal::Type::BaseModel
              attr_accessor target_arn: String

              attr_accessor locale: String?

              attr_accessor timezone: String?

              def initialize: (
                target_arn: String,
                ?locale: String?,
                ?timezone: String?
              ) -> void

              def to_hash: -> {
                target_arn: String,
                locale: String?,
                timezone: String?
              }
            end
          end

          type one_signal_channel_data_player_ids_only =
            { player_ids: ::Array[String] }

          class OneSignalChannelDataPlayerIDsOnly < Knockapi::Internal::Type::BaseModel
            attr_accessor player_ids: ::Array[String]

            def initialize: (player_ids: ::Array[String]) -> void

            def to_hash: -> { player_ids: ::Array[String] }
          end

          def self?.variants: -> ::Array[Knockapi::Models::Recipients::RecipientsChannelData::data]
        end

        type provider =
          :push_fcm
          | :push_apns
          | :push_aws_sns
          | :push_expo
          | :push_one_signal
          | :chat_slack
          | :chat_ms_teams
          | :chat_discord
          | :http_knock_webhook

        module Provider
          extend Knockapi::Internal::Type::Enum

          PUSH_FCM: :push_fcm
          PUSH_APNS: :push_apns
          PUSH_AWS_SNS: :push_aws_sns
          PUSH_EXPO: :push_expo
          PUSH_ONE_SIGNAL: :push_one_signal
          CHAT_SLACK: :chat_slack
          CHAT_MS_TEAMS: :chat_ms_teams
          CHAT_DISCORD: :chat_discord
          HTTP_KNOCK_WEBHOOK: :http_knock_webhook

          def self?.values: -> ::Array[Knockapi::Models::Recipients::RecipientsChannelData::provider]
        end
      end
    end
  end
end
