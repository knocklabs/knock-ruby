module Knockapi
  module Models
    type message =
      {
        id: String,
        _typename: String,
        channel_id: String,
        engagement_statuses: ::Array[Knockapi::Models::Message::engagement_status],
        inserted_at: Time,
        recipient: Knockapi::Models::recipient_reference,
        source: Knockapi::Message::Source,
        status: Knockapi::Models::Message::status,
        updated_at: Time,
        actors: ::Array[Knockapi::Models::recipient_reference],
        archived_at: Time?,
        channel: Knockapi::Message::Channel,
        clicked_at: Time?,
        data: ::Hash[Symbol, top]?,
        interacted_at: Time?,
        link_clicked_at: Time?,
        metadata: ::Hash[Symbol, top]?,
        read_at: Time?,
        scheduled_at: Time?,
        seen_at: Time?,
        tenant: String?,
        workflow: String?
      }

    class Message < Knockapi::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor _typename: String

      attr_accessor channel_id: String

      attr_accessor engagement_statuses: ::Array[Knockapi::Models::Message::engagement_status]

      attr_accessor inserted_at: Time

      attr_accessor recipient: Knockapi::Models::recipient_reference

      attr_accessor source: Knockapi::Message::Source

      attr_accessor status: Knockapi::Models::Message::status

      attr_accessor updated_at: Time

      attr_reader actors: ::Array[Knockapi::Models::recipient_reference]?

      def actors=: (
        ::Array[Knockapi::Models::recipient_reference]
      ) -> ::Array[Knockapi::Models::recipient_reference]

      attr_accessor archived_at: Time?

      attr_reader channel: Knockapi::Message::Channel?

      def channel=: (Knockapi::Message::Channel) -> Knockapi::Message::Channel

      attr_accessor clicked_at: Time?

      attr_accessor data: ::Hash[Symbol, top]?

      attr_accessor interacted_at: Time?

      attr_accessor link_clicked_at: Time?

      attr_accessor metadata: ::Hash[Symbol, top]?

      attr_accessor read_at: Time?

      attr_accessor scheduled_at: Time?

      attr_accessor seen_at: Time?

      attr_accessor tenant: String?

      attr_accessor workflow: String?

      def initialize: (
        id: String,
        _typename: String,
        channel_id: String,
        engagement_statuses: ::Array[Knockapi::Models::Message::engagement_status],
        inserted_at: Time,
        recipient: Knockapi::Models::recipient_reference,
        source: Knockapi::Message::Source,
        status: Knockapi::Models::Message::status,
        updated_at: Time,
        ?actors: ::Array[Knockapi::Models::recipient_reference],
        ?archived_at: Time?,
        ?channel: Knockapi::Message::Channel,
        ?clicked_at: Time?,
        ?data: ::Hash[Symbol, top]?,
        ?interacted_at: Time?,
        ?link_clicked_at: Time?,
        ?metadata: ::Hash[Symbol, top]?,
        ?read_at: Time?,
        ?scheduled_at: Time?,
        ?seen_at: Time?,
        ?tenant: String?,
        ?workflow: String?
      ) -> void

      def to_hash: -> {
        id: String,
        _typename: String,
        channel_id: String,
        engagement_statuses: ::Array[Knockapi::Models::Message::engagement_status],
        inserted_at: Time,
        recipient: Knockapi::Models::recipient_reference,
        source: Knockapi::Message::Source,
        status: Knockapi::Models::Message::status,
        updated_at: Time,
        actors: ::Array[Knockapi::Models::recipient_reference],
        archived_at: Time?,
        channel: Knockapi::Message::Channel,
        clicked_at: Time?,
        data: ::Hash[Symbol, top]?,
        interacted_at: Time?,
        link_clicked_at: Time?,
        metadata: ::Hash[Symbol, top]?,
        read_at: Time?,
        scheduled_at: Time?,
        seen_at: Time?,
        tenant: String?,
        workflow: String?
      }

      type engagement_status =
        :seen | :read | :interacted | :link_clicked | :archived

      module EngagementStatus
        extend Knockapi::Internal::Type::Enum

        SEEN: :seen
        READ: :read
        INTERACTED: :interacted
        LINK_CLICKED: :link_clicked
        ARCHIVED: :archived

        def self?.values: -> ::Array[Knockapi::Models::Message::engagement_status]
      end

      type source =
        {
          _typename: String,
          categories: ::Array[String],
          key: String,
          version_id: String,
          step_ref: String?,
          type: Knockapi::Models::Message::Source::type_
        }

      class Source < Knockapi::Internal::Type::BaseModel
        attr_accessor _typename: String

        attr_accessor categories: ::Array[String]

        attr_accessor key: String

        attr_accessor version_id: String

        attr_accessor step_ref: String?

        attr_reader type: Knockapi::Models::Message::Source::type_?

        def type=: (
          Knockapi::Models::Message::Source::type_
        ) -> Knockapi::Models::Message::Source::type_

        def initialize: (
          _typename: String,
          categories: ::Array[String],
          key: String,
          version_id: String,
          ?step_ref: String?,
          ?type: Knockapi::Models::Message::Source::type_
        ) -> void

        def to_hash: -> {
          _typename: String,
          categories: ::Array[String],
          key: String,
          version_id: String,
          step_ref: String?,
          type: Knockapi::Models::Message::Source::type_
        }

        type type_ = :broadcast | :workflow | :guide

        module Type
          extend Knockapi::Internal::Type::Enum

          BROADCAST: :broadcast
          WORKFLOW: :workflow
          GUIDE: :guide

          def self?.values: -> ::Array[Knockapi::Models::Message::Source::type_]
        end
      end

      type status =
        :queued
        | :sent
        | :delivered
        | :delivery_attempted
        | :undelivered
        | :not_sent
        | :bounced

      module Status
        extend Knockapi::Internal::Type::Enum

        QUEUED: :queued
        SENT: :sent
        DELIVERED: :delivered
        DELIVERY_ATTEMPTED: :delivery_attempted
        UNDELIVERED: :undelivered
        NOT_SENT: :not_sent
        BOUNCED: :bounced

        def self?.values: -> ::Array[Knockapi::Models::Message::status]
      end

      type channel =
        {
          id: String,
          created_at: Time,
          provider: String,
          type: Knockapi::Models::Message::Channel::type_,
          updated_at: Time,
          key: String?,
          name: String?
        }

      class Channel < Knockapi::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Time

        attr_accessor provider: String

        attr_accessor type: Knockapi::Models::Message::Channel::type_

        attr_accessor updated_at: Time

        attr_accessor key: String?

        attr_accessor name: String?

        def initialize: (
          id: String,
          created_at: Time,
          provider: String,
          type: Knockapi::Models::Message::Channel::type_,
          updated_at: Time,
          ?key: String?,
          ?name: String?
        ) -> void

        def to_hash: -> {
          id: String,
          created_at: Time,
          provider: String,
          type: Knockapi::Models::Message::Channel::type_,
          updated_at: Time,
          key: String?,
          name: String?
        }

        type type_ =
          :email
          | :in_app
          | :in_app_feed
          | :in_app_guide
          | :sms
          | :push
          | :chat
          | :http

        module Type
          extend Knockapi::Internal::Type::Enum

          EMAIL: :email
          IN_APP: :in_app
          IN_APP_FEED: :in_app_feed
          IN_APP_GUIDE: :in_app_guide
          SMS: :sms
          PUSH: :push
          CHAT: :chat
          HTTP: :http

          def self?.values: -> ::Array[Knockapi::Models::Message::Channel::type_]
        end
      end
    end
  end
end
