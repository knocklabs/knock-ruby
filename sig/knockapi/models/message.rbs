module Knockapi
  module Models
    type message =
      {
        id: String,
        _typename: String,
        actors: ::Array[Knockapi::Models::Message::actor],
        archived_at: Time?,
        channel_id: String,
        clicked_at: Time?,
        data: ::Hash[Symbol, top]?,
        engagement_statuses: ::Array[Knockapi::Models::Message::engagement_status],
        inserted_at: Time,
        interacted_at: Time?,
        link_clicked_at: Time?,
        metadata: ::Hash[Symbol, top]?,
        read_at: Time?,
        recipient: Knockapi::Models::Message::recipient,
        scheduled_at: Time?,
        seen_at: Time?,
        source: Knockapi::Models::Message::Source,
        status: Knockapi::Models::Message::status,
        tenant: String?,
        updated_at: Time,
        workflow: String?
      }

    class Message < Knockapi::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader _typename: String?

      def _typename=: (String) -> String

      attr_reader actors: ::Array[Knockapi::Models::Message::actor]?

      def actors=: (
        ::Array[Knockapi::Models::Message::actor]
      ) -> ::Array[Knockapi::Models::Message::actor]

      attr_accessor archived_at: Time?

      attr_reader channel_id: String?

      def channel_id=: (String) -> String

      attr_accessor clicked_at: Time?

      attr_accessor data: ::Hash[Symbol, top]?

      attr_reader engagement_statuses: ::Array[Knockapi::Models::Message::engagement_status]?

      def engagement_statuses=: (
        ::Array[Knockapi::Models::Message::engagement_status]
      ) -> ::Array[Knockapi::Models::Message::engagement_status]

      attr_reader inserted_at: Time?

      def inserted_at=: (Time) -> Time

      attr_accessor interacted_at: Time?

      attr_accessor link_clicked_at: Time?

      attr_accessor metadata: ::Hash[Symbol, top]?

      attr_accessor read_at: Time?

      attr_reader recipient: Knockapi::Models::Message::recipient?

      def recipient=: (
        Knockapi::Models::Message::recipient
      ) -> Knockapi::Models::Message::recipient

      attr_accessor scheduled_at: Time?

      attr_accessor seen_at: Time?

      attr_reader source: Knockapi::Models::Message::Source?

      def source=: (
        Knockapi::Models::Message::Source
      ) -> Knockapi::Models::Message::Source

      attr_reader status: Knockapi::Models::Message::status?

      def status=: (
        Knockapi::Models::Message::status
      ) -> Knockapi::Models::Message::status

      attr_accessor tenant: String?

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      attr_accessor workflow: String?

      def initialize: (
        ?id: String,
        ?_typename: String,
        ?actors: ::Array[Knockapi::Models::Message::actor],
        ?archived_at: Time?,
        ?channel_id: String,
        ?clicked_at: Time?,
        ?data: ::Hash[Symbol, top]?,
        ?engagement_statuses: ::Array[Knockapi::Models::Message::engagement_status],
        ?inserted_at: Time,
        ?interacted_at: Time?,
        ?link_clicked_at: Time?,
        ?metadata: ::Hash[Symbol, top]?,
        ?read_at: Time?,
        ?recipient: Knockapi::Models::Message::recipient,
        ?scheduled_at: Time?,
        ?seen_at: Time?,
        ?source: Knockapi::Models::Message::Source,
        ?status: Knockapi::Models::Message::status,
        ?tenant: String?,
        ?updated_at: Time,
        ?workflow: String?
      ) -> void

      def to_hash: -> Knockapi::Models::message

      type actor = String | Knockapi::Models::Message::Actor::ObjectReference

      module Actor
        extend Knockapi::Union

        type object_reference = { id: String, collection: String }

        class ObjectReference < Knockapi::BaseModel
          attr_accessor id: String

          attr_accessor collection: String

          def initialize: (id: String, collection: String) -> void

          def to_hash: -> Knockapi::Models::Message::Actor::object_reference
        end

        def self.variants: -> [String, Knockapi::Models::Message::Actor::ObjectReference]
      end

      type engagement_status =
        :seen | :read | :interacted | :link_clicked | :archived

      module EngagementStatus
        extend Knockapi::Enum

        SEEN: :seen
        READ: :read
        INTERACTED: :interacted
        LINK_CLICKED: :link_clicked
        ARCHIVED: :archived

        def self.values: -> ::Array[Knockapi::Models::Message::engagement_status]
      end

      type recipient =
        String | Knockapi::Models::Message::Recipient::ObjectReference

      module Recipient
        extend Knockapi::Union

        type object_reference = { id: String, collection: String }

        class ObjectReference < Knockapi::BaseModel
          attr_accessor id: String

          attr_accessor collection: String

          def initialize: (id: String, collection: String) -> void

          def to_hash: -> Knockapi::Models::Message::Recipient::object_reference
        end

        def self.variants: -> [String, Knockapi::Models::Message::Recipient::ObjectReference]
      end

      type source =
        {
          _typename: String,
          categories: ::Array[String],
          key: String,
          version_id: String
        }

      class Source < Knockapi::BaseModel
        attr_accessor _typename: String

        attr_accessor categories: ::Array[String]

        attr_accessor key: String

        attr_accessor version_id: String

        def initialize: (
          _typename: String,
          categories: ::Array[String],
          key: String,
          version_id: String
        ) -> void

        def to_hash: -> Knockapi::Models::Message::source
      end

      type status =
        :queued
        | :sent
        | :delivered
        | :delivery_attempted
        | :undelivered
        | :not_sent
        | :bounced

      module Status
        extend Knockapi::Enum

        QUEUED: :queued
        SENT: :sent
        DELIVERED: :delivered
        DELIVERY_ATTEMPTED: :delivery_attempted
        UNDELIVERED: :undelivered
        NOT_SENT: :not_sent
        BOUNCED: :bounced

        def self.values: -> ::Array[Knockapi::Models::Message::status]
      end
    end
  end
end
