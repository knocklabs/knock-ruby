module Knockapi
  module Models
    type workflow_trigger_params =
      {
        recipients: ::Array[Knockapi::Models::WorkflowTriggerParams::recipient],
        actor: Knockapi::Models::WorkflowTriggerParams::actor?,
        cancellation_key: String?,
        data: ::Hash[Symbol, top]?,
        tenant: Knockapi::Models::inline_tenant_request?
      }
      & Knockapi::Internal::Type::request_parameters

    class WorkflowTriggerParams < Knockapi::Internal::Type::BaseModel
      extend Knockapi::Internal::Type::RequestParameters::Converter
      include Knockapi::Internal::Type::RequestParameters

      attr_accessor recipients: ::Array[Knockapi::Models::WorkflowTriggerParams::recipient]

      attr_accessor actor: Knockapi::Models::WorkflowTriggerParams::actor?

      attr_accessor cancellation_key: String?

      attr_accessor data: ::Hash[Symbol, top]?

      attr_accessor tenant: Knockapi::Models::inline_tenant_request?

      def initialize: (
        recipients: ::Array[Knockapi::Models::WorkflowTriggerParams::recipient],
        ?actor: Knockapi::Models::WorkflowTriggerParams::actor?,
        ?cancellation_key: String?,
        ?data: ::Hash[Symbol, top]?,
        ?tenant: Knockapi::Models::inline_tenant_request?,
        ?request_options: Knockapi::request_opts
      ) -> void

      def to_hash: -> Knockapi::Models::workflow_trigger_params

      type recipient =
        String
        | Knockapi::Models::InlineIdentifyUserRequest
        | Knockapi::Models::InlineObjectRequest

      module Recipient
        extend Knockapi::Internal::Type::Union

        def self?.variants: -> [String, Knockapi::Models::InlineIdentifyUserRequest, Knockapi::Models::InlineObjectRequest]
      end

      type actor =
        String
        | Knockapi::Models::InlineIdentifyUserRequest
        | Knockapi::Models::InlineObjectRequest

      module Actor
        extend Knockapi::Internal::Type::Union

        def self?.variants: -> [String, Knockapi::Models::InlineIdentifyUserRequest, Knockapi::Models::InlineObjectRequest]
      end
    end
  end
end
