module Knockapi
  module Models
    type condition =
      {
        argument: String?,
        operator: Knockapi::Models::Condition::operator,
        variable: String
      }

    class Condition < Knockapi::Internal::Type::BaseModel
      attr_accessor argument: String?

      attr_accessor operator: Knockapi::Models::Condition::operator

      attr_accessor variable: String

      def initialize: (
        argument: String?,
        operator: Knockapi::Models::Condition::operator,
        variable: String
      ) -> void

      def to_hash: -> Knockapi::Models::condition

      type operator =
        :equal_to
        | :not_equal_to
        | :greater_than
        | :less_than
        | :greater_than_or_equal_to
        | :less_than_or_equal_to
        | :contains
        | :not_contains
        | :empty
        | :not_empty
        | :contains_all
        | :is_timestamp
        | :is_not_timestamp
        | :is_timestamp_after
        | :is_timestamp_before
        | :is_timestamp_between
        | :is_audience_member
        | :is_not_audience_member

      module Operator
        extend Knockapi::Internal::Type::Enum

        EQUAL_TO: :equal_to
        NOT_EQUAL_TO: :not_equal_to
        GREATER_THAN: :greater_than
        LESS_THAN: :less_than
        GREATER_THAN_OR_EQUAL_TO: :greater_than_or_equal_to
        LESS_THAN_OR_EQUAL_TO: :less_than_or_equal_to
        CONTAINS: :contains
        NOT_CONTAINS: :not_contains
        EMPTY: :empty
        NOT_EMPTY: :not_empty
        CONTAINS_ALL: :contains_all
        IS_TIMESTAMP: :is_timestamp
        IS_NOT_TIMESTAMP: :is_not_timestamp
        IS_TIMESTAMP_AFTER: :is_timestamp_after
        IS_TIMESTAMP_BEFORE: :is_timestamp_before
        IS_TIMESTAMP_BETWEEN: :is_timestamp_between
        IS_AUDIENCE_MEMBER: :is_audience_member
        IS_NOT_AUDIENCE_MEMBER: :is_not_audience_member

        def self?.values: -> ::Array[Knockapi::Models::Condition::operator]
      end
    end
  end
end
