module Knockapi
  module Models
    type message_delivery_log =
      {
        id: String,
        _typename: String,
        environment_id: String,
        inserted_at: String,
        request: Knockapi::MessageDeliveryLog::Request,
        response: Knockapi::MessageDeliveryLog::Response,
        service_name: String
      }

    class MessageDeliveryLog < Knockapi::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor _typename: String

      attr_accessor environment_id: String

      attr_accessor inserted_at: String

      attr_accessor request: Knockapi::MessageDeliveryLog::Request

      attr_accessor response: Knockapi::MessageDeliveryLog::Response

      attr_accessor service_name: String

      def initialize: (
        id: String,
        _typename: String,
        environment_id: String,
        inserted_at: String,
        request: Knockapi::MessageDeliveryLog::Request,
        response: Knockapi::MessageDeliveryLog::Response,
        service_name: String
      ) -> void

      type request =
        {
          body: Knockapi::MessageDeliveryLog::Request::body,
          headers: ::Hash[Symbol, top]?,
          host: String,
          method_: Knockapi::MessageDeliveryLog::Request::method_,
          path: String,
          query: String?
        }

      class Request < Knockapi::Internal::Type::BaseModel
        attr_reader body: Knockapi::MessageDeliveryLog::Request::body?

        def body=: (
          Knockapi::MessageDeliveryLog::Request::body
        ) -> Knockapi::MessageDeliveryLog::Request::body

        attr_accessor headers: ::Hash[Symbol, top]?

        attr_reader host: String?

        def host=: (String) -> String

        attr_reader method_: Knockapi::MessageDeliveryLog::Request::method_?

        def method_=: (
          Knockapi::MessageDeliveryLog::Request::method_
        ) -> Knockapi::MessageDeliveryLog::Request::method_

        attr_reader path: String?

        def path=: (String) -> String

        attr_accessor query: String?

        def initialize: (
          ?body: Knockapi::MessageDeliveryLog::Request::body,
          ?headers: ::Hash[Symbol, top]?,
          ?host: String,
          ?method_: Knockapi::MessageDeliveryLog::Request::method_,
          ?path: String,
          ?query: String?
        ) -> void

        type body = String | ::Hash[Symbol, top]

        module Body
          extend Knockapi::Internal::Type::Union

          def self?.variants: -> ::Array[Knockapi::MessageDeliveryLog::Request::body]

          UnionMember1Map: Knockapi::Internal::Type::Converter
        end

        type method_ = :GET | :POST | :PUT | :DELETE | :PATCH

        module Method
          extend Knockapi::Internal::Type::Enum

          GET: :GET
          POST: :POST
          PUT: :PUT
          DELETE: :DELETE
          PATCH: :PATCH

          def self?.values: -> ::Array[Knockapi::MessageDeliveryLog::Request::method_]
        end
      end

      type response =
        {
          body: Knockapi::MessageDeliveryLog::Response::body,
          headers: ::Hash[Symbol, top]?,
          status: Integer
        }

      class Response < Knockapi::Internal::Type::BaseModel
        attr_reader body: Knockapi::MessageDeliveryLog::Response::body?

        def body=: (
          Knockapi::MessageDeliveryLog::Response::body
        ) -> Knockapi::MessageDeliveryLog::Response::body

        attr_accessor headers: ::Hash[Symbol, top]?

        attr_reader status: Integer?

        def status=: (Integer) -> Integer

        def initialize: (
          ?body: Knockapi::MessageDeliveryLog::Response::body,
          ?headers: ::Hash[Symbol, top]?,
          ?status: Integer
        ) -> void

        type body = String | ::Hash[Symbol, top]

        module Body
          extend Knockapi::Internal::Type::Union

          def self?.variants: -> ::Array[Knockapi::MessageDeliveryLog::Response::body]

          UnionMember1Map: Knockapi::Internal::Type::Converter
        end
      end
    end
  end
end
