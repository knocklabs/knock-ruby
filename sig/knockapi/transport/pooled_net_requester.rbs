module Knockapi
  module Transport
    class PooledNetRequester
      type request =
        {
          method: Symbol,
          url: URI::Generic,
          headers: ::Hash[String, String],
          body: top,
          deadline: Float
        }

      KEEP_ALIVE_TIMEOUT: 30

      def self.connect: (URI::Generic url) -> top

      def self.calibrate_socket_timeout: (top conn, Float deadline) -> void

      def self.build_request: (
        Knockapi::Transport::PooledNetRequester::request request
      ) {
        (String arg0) -> void
      } -> top

      private def with_pool: (
        URI::Generic url,
        deadline: Float
      ) {
        (top arg0) -> void
      } -> void

      def execute: (
        Knockapi::Transport::PooledNetRequester::request request
      ) -> [Integer, top, Enumerable[String]]

      def initialize: (?size: Integer) -> void
    end
  end
end
