module Knock
  module Models
    type object_list_subscriptions_params =
      {
        collection: String,
        after: String,
        before: String,
        mode: Knock::Models::ObjectListSubscriptionsParams::mode,
        page_size: Integer,
        recipients: ::Array[Knock::Models::ObjectListSubscriptionsParams::recipient]
      }
      & Knock::request_parameters

    class ObjectListSubscriptionsParams < Knock::BaseModel
      extend Knock::RequestParameters::Converter
      include Knock::RequestParameters

      attr_accessor collection: String

      attr_reader after: String?

      def after=: (String) -> String

      attr_reader before: String?

      def before=: (String) -> String

      attr_reader mode: Knock::Models::ObjectListSubscriptionsParams::mode?

      def mode=: (
        Knock::Models::ObjectListSubscriptionsParams::mode
      ) -> Knock::Models::ObjectListSubscriptionsParams::mode

      attr_reader page_size: Integer?

      def page_size=: (Integer) -> Integer

      attr_reader recipients: ::Array[Knock::Models::ObjectListSubscriptionsParams::recipient]?

      def recipients=: (
        ::Array[Knock::Models::ObjectListSubscriptionsParams::recipient]
      ) -> ::Array[Knock::Models::ObjectListSubscriptionsParams::recipient]

      def initialize:
        (
          collection: String,
          after: String,
          before: String,
          mode: Knock::Models::ObjectListSubscriptionsParams::mode,
          page_size: Integer,
          recipients: ::Array[Knock::Models::ObjectListSubscriptionsParams::recipient],
          request_options: Knock::request_opts
        ) -> void
        | (
          ?Knock::Models::object_list_subscriptions_params
          | Knock::BaseModel data
        ) -> void

      def to_hash: -> Knock::Models::object_list_subscriptions_params

      type mode = :recipient | :object

      class Mode < Knock::Enum
        RECIPIENT: :recipient
        OBJECT: :object

        def self.values: -> ::Array[Knock::Models::ObjectListSubscriptionsParams::mode]
      end

      type recipient =
        String
        | Knock::Models::ObjectListSubscriptionsParams::Recipient::ObjectReference

      class Recipient < Knock::Union
        type object_reference = { id: String, collection: String }

        class ObjectReference < Knock::BaseModel
          attr_accessor id: String

          attr_accessor collection: String

          def initialize:
            (id: String, collection: String) -> void
            | (
              ?Knock::Models::ObjectListSubscriptionsParams::Recipient::object_reference
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::ObjectListSubscriptionsParams::Recipient::object_reference
        end

        private def self.variants: -> [[nil, String], [nil, Knock::Models::ObjectListSubscriptionsParams::Recipient::ObjectReference]]
      end
    end
  end
end
