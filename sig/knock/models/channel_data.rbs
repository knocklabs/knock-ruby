module Knock
  module Models
    type channel_data =
      {
        _typename: String,
        channel_id: String,
        data: Knock::Models::ChannelData::data
      }

    class ChannelData < Knock::BaseModel
      attr_accessor _typename: String

      attr_accessor channel_id: String

      attr_accessor data: Knock::Models::ChannelData::data

      def initialize:
        (
          _typename: String,
          channel_id: String,
          data: Knock::Models::ChannelData::data
        ) -> void
        | (?Knock::Models::channel_data | Knock::BaseModel data) -> void

      def to_hash: -> Knock::Models::channel_data

      type data =
        Knock::Models::PushChannelData
        | Knock::Models::SlackChannelData
        | Knock::Models::MsTeamsChannelData
        | Knock::Models::DiscordChannelData
        | Knock::Models::OneSignalChannelData

      class Data < Knock::Union
        private def self.variants: -> [[nil, Knock::Models::PushChannelData], [nil, Knock::Models::SlackChannelData], [nil, Knock::Models::MsTeamsChannelData], [nil, Knock::Models::DiscordChannelData], [nil, Knock::Models::OneSignalChannelData]]
      end
    end
  end
end
