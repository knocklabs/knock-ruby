module Knock
  module Models
    type schedule_update_params =
      {
        schedule_ids: ::Array[String],
        actor: Knock::Models::recipient_request?,
        data: ::Hash[Symbol, top]?,
        ending_at: Time?,
        repeats: ::Array[Knock::Models::ScheduleRepeatRule],
        scheduled_at: Time?,
        tenant: Knock::Models::inline_tenant_request?
      }
      & Knock::request_parameters

    class ScheduleUpdateParams < Knock::BaseModel
      extend Knock::RequestParameters::Converter
      include Knock::RequestParameters

      attr_accessor schedule_ids: ::Array[String]

      attr_accessor actor: Knock::Models::recipient_request?

      attr_accessor data: ::Hash[Symbol, top]?

      attr_accessor ending_at: Time?

      attr_reader repeats: ::Array[Knock::Models::ScheduleRepeatRule]?

      def repeats=: (
        ::Array[Knock::Models::ScheduleRepeatRule]
      ) -> ::Array[Knock::Models::ScheduleRepeatRule]

      attr_accessor scheduled_at: Time?

      attr_accessor tenant: Knock::Models::inline_tenant_request?

      def initialize:
        (
          schedule_ids: ::Array[String],
          actor: Knock::Models::recipient_request?,
          data: ::Hash[Symbol, top]?,
          ending_at: Time?,
          repeats: ::Array[Knock::Models::ScheduleRepeatRule],
          scheduled_at: Time?,
          tenant: Knock::Models::inline_tenant_request?,
          request_options: Knock::request_opts
        ) -> void
        | (
          ?Knock::Models::schedule_update_params | Knock::BaseModel data
        ) -> void

      def to_hash: -> Knock::Models::schedule_update_params
    end
  end
end
