module Knock
  module Models
    module Users
      type feed_list_items_response =
        {
          id: String,
          _typename: String,
          activities: ::Array[Knock::Models::Activity],
          actors: ::Array[Knock::Models::recipient],
          blocks: ::Array[Knock::Models::Users::FeedListItemsResponse::block],
          data: ::Hash[Symbol, top]?,
          inserted_at: String,
          source: Knock::Models::Users::FeedListItemsResponse::Source,
          tenant: String?,
          total_activities: Integer,
          total_actors: Integer,
          updated_at: String,
          archived_at: String?,
          clicked_at: String?,
          interacted_at: String?,
          link_clicked_at: String?,
          read_at: String?,
          seen_at: String?
        }

      class FeedListItemsResponse < Knock::BaseModel
        attr_accessor id: String

        attr_accessor _typename: String

        attr_accessor activities: ::Array[Knock::Models::Activity]

        attr_accessor actors: ::Array[Knock::Models::recipient]

        attr_accessor blocks: ::Array[Knock::Models::Users::FeedListItemsResponse::block]

        attr_accessor data: ::Hash[Symbol, top]?

        attr_accessor inserted_at: String

        attr_accessor source: Knock::Models::Users::FeedListItemsResponse::Source

        attr_accessor tenant: String?

        attr_accessor total_activities: Integer

        attr_accessor total_actors: Integer

        attr_accessor updated_at: String

        attr_accessor archived_at: String?

        attr_accessor clicked_at: String?

        attr_accessor interacted_at: String?

        attr_accessor link_clicked_at: String?

        attr_accessor read_at: String?

        attr_accessor seen_at: String?

        def initialize:
          (
            id: String,
            _typename: String,
            activities: ::Array[Knock::Models::Activity],
            actors: ::Array[Knock::Models::recipient],
            blocks: ::Array[Knock::Models::Users::FeedListItemsResponse::block],
            data: ::Hash[Symbol, top]?,
            inserted_at: String,
            source: Knock::Models::Users::FeedListItemsResponse::Source,
            tenant: String?,
            total_activities: Integer,
            total_actors: Integer,
            updated_at: String,
            archived_at: String?,
            clicked_at: String?,
            interacted_at: String?,
            link_clicked_at: String?,
            read_at: String?,
            seen_at: String?
          ) -> void
          | (
            ?Knock::Models::Users::feed_list_items_response
            | Knock::BaseModel data
          ) -> void

        def to_hash: -> Knock::Models::Users::feed_list_items_response

        type block =
          Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedContentBlock
          | Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock

        class Block < Knock::Union
          type message_in_app_feed_content_block =
            {
              content: String,
              name: String,
              rendered: String,
              type: Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedContentBlock::type_
            }

          class MessageInAppFeedContentBlock < Knock::BaseModel
            attr_accessor content: String

            attr_accessor name: String

            attr_accessor rendered: String

            attr_accessor type: Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedContentBlock::type_

            def initialize:
              (
                content: String,
                name: String,
                rendered: String,
                type: Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedContentBlock::type_
              ) -> void
              | (
                ?Knock::Models::Users::FeedListItemsResponse::Block::message_in_app_feed_content_block
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::Users::FeedListItemsResponse::Block::message_in_app_feed_content_block

            type type_ = :markdown | :text

            class Type < Knock::Enum
              MARKDOWN: :markdown
              TEXT: :text

              def self.values: -> ::Array[Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedContentBlock::type_]
            end
          end

          type message_in_app_feed_button_set_block =
            {
              buttons: ::Array[Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::Button],
              name: String,
              type: Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::type_
            }

          class MessageInAppFeedButtonSetBlock < Knock::BaseModel
            attr_accessor buttons: ::Array[Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::Button]

            attr_accessor name: String

            attr_accessor type: Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::type_

            def initialize:
              (
                buttons: ::Array[Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::Button],
                name: String,
                type: Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::type_
              ) -> void
              | (
                ?Knock::Models::Users::FeedListItemsResponse::Block::message_in_app_feed_button_set_block
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::Users::FeedListItemsResponse::Block::message_in_app_feed_button_set_block

            type button = { action: String, label: String, name: String }

            class Button < Knock::BaseModel
              attr_accessor action: String

              attr_accessor label: String

              attr_accessor name: String

              def initialize:
                (action: String, label: String, name: String) -> void
                | (
                  ?Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::button
                  | Knock::BaseModel data
                ) -> void

              def to_hash: -> Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::button
            end

            type type_ = :button_set

            class Type < Knock::Enum
              BUTTON_SET: :button_set

              def self.values: -> ::Array[Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock::type_]
            end
          end

          private def self.variants: -> [[nil, Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedContentBlock], [nil, Knock::Models::Users::FeedListItemsResponse::Block::MessageInAppFeedButtonSetBlock]]
        end

        type source =
          {
            _typename: String,
            categories: ::Array[String],
            key: String,
            version_id: String
          }

        class Source < Knock::BaseModel
          attr_accessor _typename: String

          attr_accessor categories: ::Array[String]

          attr_accessor key: String

          attr_accessor version_id: String

          def initialize:
            (
              _typename: String,
              categories: ::Array[String],
              key: String,
              version_id: String
            ) -> void
            | (
              ?Knock::Models::Users::FeedListItemsResponse::source
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::Users::FeedListItemsResponse::source
        end
      end
    end
  end
end
