module Knock
  module Models
    module Messages
      type batch_get_content_response_item =
        {
          _typename: String,
          data: Knock::Models::Messages::BatchGetContentResponseItem::data,
          inserted_at: Time,
          message_id: String
        }

      class BatchGetContentResponseItem < Knock::BaseModel
        attr_accessor _typename: String

        attr_accessor data: Knock::Models::Messages::BatchGetContentResponseItem::data

        attr_accessor inserted_at: Time

        attr_accessor message_id: String

        def initialize:
          (
            _typename: String,
            data: Knock::Models::Messages::BatchGetContentResponseItem::data,
            inserted_at: Time,
            message_id: String
          ) -> void
          | (
            ?Knock::Models::Messages::batch_get_content_response_item
            | Knock::BaseModel data
          ) -> void

        def to_hash: -> Knock::Models::Messages::batch_get_content_response_item

        type data =
          Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageEmailContent
          | Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageSMSContent
          | Knock::Models::Messages::BatchGetContentResponseItem::Data::MessagePushContent
          | Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent
          | Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent

        class Data < Knock::Union
          type message_email_content =
            {
              _typename: String,
              from: String,
              html_body: String,
              subject_line: String,
              text_body: String,
              to: String,
              bcc: String?,
              cc: String?,
              reply_to: String?
            }

          class MessageEmailContent < Knock::BaseModel
            attr_accessor _typename: String

            attr_accessor from: String

            attr_accessor html_body: String

            attr_accessor subject_line: String

            attr_accessor text_body: String

            attr_accessor to: String

            attr_accessor bcc: String?

            attr_accessor cc: String?

            attr_accessor reply_to: String?

            def initialize:
              (
                _typename: String,
                from: String,
                html_body: String,
                subject_line: String,
                text_body: String,
                to: String,
                bcc: String?,
                cc: String?,
                reply_to: String?
              ) -> void
              | (
                ?Knock::Models::Messages::BatchGetContentResponseItem::Data::message_email_content
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::message_email_content
          end

          type message_sms_content =
            { _typename: String, body: String, to: String }

          class MessageSMSContent < Knock::BaseModel
            attr_accessor _typename: String

            attr_accessor body: String

            attr_accessor to: String

            def initialize:
              (_typename: String, body: String, to: String) -> void
              | (
                ?Knock::Models::Messages::BatchGetContentResponseItem::Data::message_sms_content
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::message_sms_content
          end

          type message_push_content =
            {
              token: String,
              _typename: String,
              body: String,
              title: String,
              data: ::Hash[Symbol, top]?
            }

          class MessagePushContent < Knock::BaseModel
            attr_accessor token: String

            attr_accessor _typename: String

            attr_accessor body: String

            attr_accessor title: String

            attr_accessor data: ::Hash[Symbol, top]?

            def initialize:
              (
                token: String,
                _typename: String,
                body: String,
                title: String,
                data: ::Hash[Symbol, top]?
              ) -> void
              | (
                ?Knock::Models::Messages::BatchGetContentResponseItem::Data::message_push_content
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::message_push_content
          end

          type message_chat_content =
            {
              _typename: String,
              connection: ::Hash[Symbol, top],
              template: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template,
              metadata: ::Hash[Symbol, top]?
            }

          class MessageChatContent < Knock::BaseModel
            attr_accessor _typename: String

            attr_accessor connection: ::Hash[Symbol, top]

            attr_accessor template: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template

            attr_accessor metadata: ::Hash[Symbol, top]?

            def initialize:
              (
                _typename: String,
                connection: ::Hash[Symbol, top],
                template: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template,
                metadata: ::Hash[Symbol, top]?
              ) -> void
              | (
                ?Knock::Models::Messages::BatchGetContentResponseItem::Data::message_chat_content
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::message_chat_content

            type template =
              {
                blocks: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::Block]?,
                json_content: ::Hash[Symbol, top]?,
                summary: String?
              }

            class Template < Knock::BaseModel
              attr_accessor blocks: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::Block]?

              attr_accessor json_content: ::Hash[Symbol, top]?

              attr_accessor summary: String?

              def initialize:
                (
                  blocks: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::Block]?,
                  json_content: ::Hash[Symbol, top]?,
                  summary: String?
                ) -> void
                | (
                  ?Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::template
                  | Knock::BaseModel data
                ) -> void

              def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::template

              type block =
                {
                  content: String,
                  name: String,
                  type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::Block::type_
                }

              class Block < Knock::BaseModel
                attr_accessor content: String

                attr_accessor name: String

                attr_accessor type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::Block::type_

                def initialize:
                  (
                    content: String,
                    name: String,
                    type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::Block::type_
                  ) -> void
                  | (
                    ?Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::block
                    | Knock::BaseModel data
                  ) -> void

                def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::block

                type type_ = :text | :markdown

                class Type < Knock::Enum
                  TEXT: :text
                  MARKDOWN: :markdown

                  def self.values: -> ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent::Template::Block::type_]
                end
              end
            end
          end

          type message_in_app_feed_content =
            {
              _typename: String,
              blocks: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::block]
            }

          class MessageInAppFeedContent < Knock::BaseModel
            attr_accessor _typename: String

            attr_accessor blocks: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::block]

            def initialize:
              (
                _typename: String,
                blocks: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::block]
              ) -> void
              | (
                ?Knock::Models::Messages::BatchGetContentResponseItem::Data::message_in_app_feed_content
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::message_in_app_feed_content

            type block =
              Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock
              | Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock

            class Block < Knock::Union
              type message_in_app_feed_content_block =
                {
                  content: String,
                  name: String,
                  rendered: String,
                  type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_
                }

              class MessageInAppFeedContentBlock < Knock::BaseModel
                attr_accessor content: String

                attr_accessor name: String

                attr_accessor rendered: String

                attr_accessor type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_

                def initialize:
                  (
                    content: String,
                    name: String,
                    rendered: String,
                    type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_
                  ) -> void
                  | (
                    ?Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::message_in_app_feed_content_block
                    | Knock::BaseModel data
                  ) -> void

                def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::message_in_app_feed_content_block

                type type_ = :markdown | :text

                class Type < Knock::Enum
                  MARKDOWN: :markdown
                  TEXT: :text

                  def self.values: -> ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_]
                end
              end

              type message_in_app_feed_button_set_block =
                {
                  buttons: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::Button],
                  name: String,
                  type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_
                }

              class MessageInAppFeedButtonSetBlock < Knock::BaseModel
                attr_accessor buttons: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::Button]

                attr_accessor name: String

                attr_accessor type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_

                def initialize:
                  (
                    buttons: ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::Button],
                    name: String,
                    type: Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_
                  ) -> void
                  | (
                    ?Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::message_in_app_feed_button_set_block
                    | Knock::BaseModel data
                  ) -> void

                def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::message_in_app_feed_button_set_block

                type button = { action: String, label: String, name: String }

                class Button < Knock::BaseModel
                  attr_accessor action: String

                  attr_accessor label: String

                  attr_accessor name: String

                  def initialize:
                    (action: String, label: String, name: String) -> void
                    | (
                      ?Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::button
                      | Knock::BaseModel data
                    ) -> void

                  def to_hash: -> Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::button
                end

                type type_ = :button_set

                class Type < Knock::Enum
                  BUTTON_SET: :button_set

                  def self.values: -> ::Array[Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_]
                end
              end

              private def self.variants: -> [[nil, Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock], [nil, Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock]]
            end
          end

          private def self.variants: -> [[nil, Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageEmailContent], [nil, Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageSMSContent], [nil, Knock::Models::Messages::BatchGetContentResponseItem::Data::MessagePushContent], [nil, Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageChatContent], [nil, Knock::Models::Messages::BatchGetContentResponseItem::Data::MessageInAppFeedContent]]
        end
      end

      type batch_get_content_response =
        ::Array[Knock::Models::Messages::BatchGetContentResponseItem]

      BatchGetContentResponse: batch_get_content_response
    end
  end
end
