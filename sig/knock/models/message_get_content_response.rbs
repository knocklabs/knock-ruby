module Knock
  module Models
    type message_get_content_response =
      {
        _typename: String,
        data: Knock::Models::MessageGetContentResponse::data,
        inserted_at: Time,
        message_id: String
      }

    class MessageGetContentResponse < Knock::BaseModel
      attr_accessor _typename: String

      attr_accessor data: Knock::Models::MessageGetContentResponse::data

      attr_accessor inserted_at: Time

      attr_accessor message_id: String

      def initialize:
        (
          _typename: String,
          data: Knock::Models::MessageGetContentResponse::data,
          inserted_at: Time,
          message_id: String
        ) -> void
        | (
          ?Knock::Models::message_get_content_response | Knock::BaseModel data
        ) -> void

      def to_hash: -> Knock::Models::message_get_content_response

      type data =
        Knock::Models::MessageGetContentResponse::Data::MessageEmailContent
        | Knock::Models::MessageGetContentResponse::Data::MessageSMSContent
        | Knock::Models::MessageGetContentResponse::Data::MessagePushContent
        | Knock::Models::MessageGetContentResponse::Data::MessageChatContent
        | Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent

      class Data < Knock::Union
        type message_email_content =
          {
            _typename: String,
            from: String,
            html_body: String,
            subject_line: String,
            text_body: String,
            to: String,
            bcc: String?,
            cc: String?,
            reply_to: String?
          }

        class MessageEmailContent < Knock::BaseModel
          attr_accessor _typename: String

          attr_accessor from: String

          attr_accessor html_body: String

          attr_accessor subject_line: String

          attr_accessor text_body: String

          attr_accessor to: String

          attr_accessor bcc: String?

          attr_accessor cc: String?

          attr_accessor reply_to: String?

          def initialize:
            (
              _typename: String,
              from: String,
              html_body: String,
              subject_line: String,
              text_body: String,
              to: String,
              bcc: String?,
              cc: String?,
              reply_to: String?
            ) -> void
            | (
              ?Knock::Models::MessageGetContentResponse::Data::message_email_content
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::MessageGetContentResponse::Data::message_email_content
        end

        type message_sms_content =
          { _typename: String, body: String, to: String }

        class MessageSMSContent < Knock::BaseModel
          attr_accessor _typename: String

          attr_accessor body: String

          attr_accessor to: String

          def initialize:
            (_typename: String, body: String, to: String) -> void
            | (
              ?Knock::Models::MessageGetContentResponse::Data::message_sms_content
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::MessageGetContentResponse::Data::message_sms_content
        end

        type message_push_content =
          {
            token: String,
            _typename: String,
            body: String,
            title: String,
            data: ::Hash[Symbol, top]?
          }

        class MessagePushContent < Knock::BaseModel
          attr_accessor token: String

          attr_accessor _typename: String

          attr_accessor body: String

          attr_accessor title: String

          attr_accessor data: ::Hash[Symbol, top]?

          def initialize:
            (
              token: String,
              _typename: String,
              body: String,
              title: String,
              data: ::Hash[Symbol, top]?
            ) -> void
            | (
              ?Knock::Models::MessageGetContentResponse::Data::message_push_content
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::MessageGetContentResponse::Data::message_push_content
        end

        type message_chat_content =
          {
            _typename: String,
            connection: ::Hash[Symbol, top],
            template: Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template,
            metadata: ::Hash[Symbol, top]?
          }

        class MessageChatContent < Knock::BaseModel
          attr_accessor _typename: String

          attr_accessor connection: ::Hash[Symbol, top]

          attr_accessor template: Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template

          attr_accessor metadata: ::Hash[Symbol, top]?

          def initialize:
            (
              _typename: String,
              connection: ::Hash[Symbol, top],
              template: Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template,
              metadata: ::Hash[Symbol, top]?
            ) -> void
            | (
              ?Knock::Models::MessageGetContentResponse::Data::message_chat_content
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::MessageGetContentResponse::Data::message_chat_content

          type template =
            {
              blocks: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::Block]?,
              json_content: ::Hash[Symbol, top]?,
              summary: String?
            }

          class Template < Knock::BaseModel
            attr_accessor blocks: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::Block]?

            attr_accessor json_content: ::Hash[Symbol, top]?

            attr_accessor summary: String?

            def initialize:
              (
                blocks: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::Block]?,
                json_content: ::Hash[Symbol, top]?,
                summary: String?
              ) -> void
              | (
                ?Knock::Models::MessageGetContentResponse::Data::MessageChatContent::template
                | Knock::BaseModel data
              ) -> void

            def to_hash: -> Knock::Models::MessageGetContentResponse::Data::MessageChatContent::template

            type block =
              {
                content: String,
                name: String,
                type: Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::Block::type_
              }

            class Block < Knock::BaseModel
              attr_accessor content: String

              attr_accessor name: String

              attr_accessor type: Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::Block::type_

              def initialize:
                (
                  content: String,
                  name: String,
                  type: Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::Block::type_
                ) -> void
                | (
                  ?Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::block
                  | Knock::BaseModel data
                ) -> void

              def to_hash: -> Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::block

              type type_ = :text | :markdown

              class Type < Knock::Enum
                TEXT: :text
                MARKDOWN: :markdown

                def self.values: -> ::Array[Knock::Models::MessageGetContentResponse::Data::MessageChatContent::Template::Block::type_]
              end
            end
          end
        end

        type message_in_app_feed_content =
          {
            _typename: String,
            blocks: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::block]
          }

        class MessageInAppFeedContent < Knock::BaseModel
          attr_accessor _typename: String

          attr_accessor blocks: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::block]

          def initialize:
            (
              _typename: String,
              blocks: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::block]
            ) -> void
            | (
              ?Knock::Models::MessageGetContentResponse::Data::message_in_app_feed_content
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::MessageGetContentResponse::Data::message_in_app_feed_content

          type block =
            Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock
            | Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock

          class Block < Knock::Union
            type message_in_app_feed_content_block =
              {
                content: String,
                name: String,
                rendered: String,
                type: Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_
              }

            class MessageInAppFeedContentBlock < Knock::BaseModel
              attr_accessor content: String

              attr_accessor name: String

              attr_accessor rendered: String

              attr_accessor type: Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_

              def initialize:
                (
                  content: String,
                  name: String,
                  rendered: String,
                  type: Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_
                ) -> void
                | (
                  ?Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::message_in_app_feed_content_block
                  | Knock::BaseModel data
                ) -> void

              def to_hash: -> Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::message_in_app_feed_content_block

              type type_ = :markdown | :text

              class Type < Knock::Enum
                MARKDOWN: :markdown
                TEXT: :text

                def self.values: -> ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock::type_]
              end
            end

            type message_in_app_feed_button_set_block =
              {
                buttons: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::Button],
                name: String,
                type: Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_
              }

            class MessageInAppFeedButtonSetBlock < Knock::BaseModel
              attr_accessor buttons: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::Button]

              attr_accessor name: String

              attr_accessor type: Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_

              def initialize:
                (
                  buttons: ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::Button],
                  name: String,
                  type: Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_
                ) -> void
                | (
                  ?Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::message_in_app_feed_button_set_block
                  | Knock::BaseModel data
                ) -> void

              def to_hash: -> Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::message_in_app_feed_button_set_block

              type button = { action: String, label: String, name: String }

              class Button < Knock::BaseModel
                attr_accessor action: String

                attr_accessor label: String

                attr_accessor name: String

                def initialize:
                  (action: String, label: String, name: String) -> void
                  | (
                    ?Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::button
                    | Knock::BaseModel data
                  ) -> void

                def to_hash: -> Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::button
              end

              type type_ = :button_set

              class Type < Knock::Enum
                BUTTON_SET: :button_set

                def self.values: -> ::Array[Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock::type_]
              end
            end

            private def self.variants: -> [[nil, Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedContentBlock], [nil, Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent::Block::MessageInAppFeedButtonSetBlock]]
          end
        end

        private def self.variants: -> [[nil, Knock::Models::MessageGetContentResponse::Data::MessageEmailContent], [nil, Knock::Models::MessageGetContentResponse::Data::MessageSMSContent], [nil, Knock::Models::MessageGetContentResponse::Data::MessagePushContent], [nil, Knock::Models::MessageGetContentResponse::Data::MessageChatContent], [nil, Knock::Models::MessageGetContentResponse::Data::MessageInAppFeedContent]]
      end
    end
  end
end
