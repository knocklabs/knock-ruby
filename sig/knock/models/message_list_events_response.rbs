module Knock
  module Models
    type message_list_events_response =
      {
        id: String,
        _typename: String,
        inserted_at: Time,
        recipient: Knock::Models::MessageListEventsResponse::recipient,
        type: Knock::Models::MessageListEventsResponse::type_,
        data: ::Hash[Symbol, top]?
      }

    class MessageListEventsResponse < Knock::BaseModel
      attr_accessor id: String

      attr_accessor _typename: String

      attr_accessor inserted_at: Time

      attr_accessor recipient: Knock::Models::MessageListEventsResponse::recipient

      attr_accessor type: Knock::Models::MessageListEventsResponse::type_

      attr_accessor data: ::Hash[Symbol, top]?

      def initialize:
        (
          id: String,
          _typename: String,
          inserted_at: Time,
          recipient: Knock::Models::MessageListEventsResponse::recipient,
          type: Knock::Models::MessageListEventsResponse::type_,
          data: ::Hash[Symbol, top]?
        ) -> void
        | (
          ?Knock::Models::message_list_events_response | Knock::BaseModel data
        ) -> void

      def to_hash: -> Knock::Models::message_list_events_response

      type recipient =
        String
        | Knock::Models::MessageListEventsResponse::Recipient::ObjectReference

      class Recipient < Knock::Union
        type object_reference = { id: String, collection: String }

        class ObjectReference < Knock::BaseModel
          attr_accessor id: String

          attr_accessor collection: String

          def initialize:
            (id: String, collection: String) -> void
            | (
              ?Knock::Models::MessageListEventsResponse::Recipient::object_reference
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::MessageListEventsResponse::Recipient::object_reference
        end

        private def self.variants: -> [[nil, String], [nil, Knock::Models::MessageListEventsResponse::Recipient::ObjectReference]]
      end

      type type_ =
        :"message.queued"
        | :"message.sent"
        | :"message.delivered"
        | :"message.undelivered"
        | :"message.bounced"
        | :"message.read"
        | :"message.unread"
        | :"message.link_clicked"
        | :"message.interacted"
        | :"message.seen"
        | :"message.unseen"
        | :"message.archived"
        | :"message.unarchived"

      class Type < Knock::Enum
        MESSAGE_QUEUED: :"message.queued"
        MESSAGE_SENT: :"message.sent"
        MESSAGE_DELIVERED: :"message.delivered"
        MESSAGE_UNDELIVERED: :"message.undelivered"
        MESSAGE_BOUNCED: :"message.bounced"
        MESSAGE_READ: :"message.read"
        MESSAGE_UNREAD: :"message.unread"
        MESSAGE_LINK_CLICKED: :"message.link_clicked"
        MESSAGE_INTERACTED: :"message.interacted"
        MESSAGE_SEEN: :"message.seen"
        MESSAGE_UNSEEN: :"message.unseen"
        MESSAGE_ARCHIVED: :"message.archived"
        MESSAGE_UNARCHIVED: :"message.unarchived"

        def self.values: -> ::Array[Knock::Models::MessageListEventsResponse::type_]
      end
    end
  end
end
