module Knock
  module Models
    type subscription =
      {
        _typename: String,
        inserted_at: Time,
        object: Knock::Models::Object,
        recipient: Knock::Models::recipient,
        updated_at: Time,
        properties: ::Hash[Symbol, top]?
      }

    class Subscription < Knock::BaseModel
      attr_accessor _typename: String

      attr_accessor inserted_at: Time

      attr_accessor object: Knock::Models::Object

      attr_accessor recipient: Knock::Models::recipient

      attr_accessor updated_at: Time

      attr_accessor properties: ::Hash[Symbol, top]?

      def initialize:
        (
          _typename: String,
          inserted_at: Time,
          object: Knock::Models::Object,
          recipient: Knock::Models::recipient,
          updated_at: Time,
          properties: ::Hash[Symbol, top]?
        ) -> void
        | (?Knock::Models::subscription | Knock::BaseModel data) -> void

      def to_hash: -> Knock::Models::subscription
    end
  end
end
