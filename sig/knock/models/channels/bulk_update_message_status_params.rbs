module Knock
  module Models
    module Channels
      type bulk_update_message_status_params =
        {
          channel_id: String,
          archived: Knock::Models::Channels::BulkUpdateMessageStatusParams::archived,
          delivery_status: Knock::Models::Channels::BulkUpdateMessageStatusParams::delivery_status,
          engagement_status: Knock::Models::Channels::BulkUpdateMessageStatusParams::engagement_status,
          has_tenant: bool,
          newer_than: Time,
          older_than: Time,
          recipient_ids: ::Array[String],
          tenants: ::Array[String],
          trigger_data: String,
          workflows: ::Array[String]
        }
        & Knock::request_parameters

      class BulkUpdateMessageStatusParams < Knock::BaseModel
        extend Knock::RequestParameters::Converter
        include Knock::RequestParameters

        attr_accessor channel_id: String

        attr_reader archived: Knock::Models::Channels::BulkUpdateMessageStatusParams::archived?

        def archived=: (
          Knock::Models::Channels::BulkUpdateMessageStatusParams::archived
        ) -> Knock::Models::Channels::BulkUpdateMessageStatusParams::archived

        attr_reader delivery_status: Knock::Models::Channels::BulkUpdateMessageStatusParams::delivery_status?

        def delivery_status=: (
          Knock::Models::Channels::BulkUpdateMessageStatusParams::delivery_status
        ) -> Knock::Models::Channels::BulkUpdateMessageStatusParams::delivery_status

        attr_reader engagement_status: Knock::Models::Channels::BulkUpdateMessageStatusParams::engagement_status?

        def engagement_status=: (
          Knock::Models::Channels::BulkUpdateMessageStatusParams::engagement_status
        ) -> Knock::Models::Channels::BulkUpdateMessageStatusParams::engagement_status

        attr_reader has_tenant: bool?

        def has_tenant=: (bool) -> bool

        attr_reader newer_than: Time?

        def newer_than=: (Time) -> Time

        attr_reader older_than: Time?

        def older_than=: (Time) -> Time

        attr_reader recipient_ids: ::Array[String]?

        def recipient_ids=: (::Array[String]) -> ::Array[String]

        attr_reader tenants: ::Array[String]?

        def tenants=: (::Array[String]) -> ::Array[String]

        attr_reader trigger_data: String?

        def trigger_data=: (String) -> String

        attr_reader workflows: ::Array[String]?

        def workflows=: (::Array[String]) -> ::Array[String]

        def initialize:
          (
            channel_id: String,
            archived: Knock::Models::Channels::BulkUpdateMessageStatusParams::archived,
            delivery_status: Knock::Models::Channels::BulkUpdateMessageStatusParams::delivery_status,
            engagement_status: Knock::Models::Channels::BulkUpdateMessageStatusParams::engagement_status,
            has_tenant: bool,
            newer_than: Time,
            older_than: Time,
            recipient_ids: ::Array[String],
            tenants: ::Array[String],
            trigger_data: String,
            workflows: ::Array[String],
            request_options: Knock::request_opts
          ) -> void
          | (
            ?Knock::Models::Channels::bulk_update_message_status_params
            | Knock::BaseModel data
          ) -> void

        def to_hash: -> Knock::Models::Channels::bulk_update_message_status_params

        type action =
          :seen
          | :unseen
          | :read
          | :unread
          | :archived
          | :unarchived
          | :interacted
          | :archive
          | :unarchive
          | :delete

        class Action < Knock::Enum
          SEEN: :seen
          UNSEEN: :unseen
          READ: :read
          UNREAD: :unread
          ARCHIVED: :archived
          UNARCHIVED: :unarchived
          INTERACTED: :interacted
          ARCHIVE: :archive
          UNARCHIVE: :unarchive
          DELETE: :delete

          def self.values: -> ::Array[Knock::Models::Channels::BulkUpdateMessageStatusParams::action]
        end

        type archived = :exclude | :include | :only

        class Archived < Knock::Enum
          EXCLUDE: :exclude
          INCLUDE: :include
          ONLY: :only

          def self.values: -> ::Array[Knock::Models::Channels::BulkUpdateMessageStatusParams::archived]
        end

        type delivery_status =
          :queued
          | :sent
          | :delivered
          | :delivery_attempted
          | :undelivered
          | :not_sent
          | :bounced

        class DeliveryStatus < Knock::Enum
          QUEUED: :queued
          SENT: :sent
          DELIVERED: :delivered
          DELIVERY_ATTEMPTED: :delivery_attempted
          UNDELIVERED: :undelivered
          NOT_SENT: :not_sent
          BOUNCED: :bounced

          def self.values: -> ::Array[Knock::Models::Channels::BulkUpdateMessageStatusParams::delivery_status]
        end

        type engagement_status =
          :seen
          | :unseen
          | :read
          | :unread
          | :archived
          | :unarchived
          | :link_clicked
          | :interacted

        class EngagementStatus < Knock::Enum
          SEEN: :seen
          UNSEEN: :unseen
          READ: :read
          UNREAD: :unread
          ARCHIVED: :archived
          UNARCHIVED: :unarchived
          LINK_CLICKED: :link_clicked
          INTERACTED: :interacted

          def self.values: -> ::Array[Knock::Models::Channels::BulkUpdateMessageStatusParams::engagement_status]
        end
      end
    end
  end
end
