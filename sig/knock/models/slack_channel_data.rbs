module Knock
  module Models
    type slack_channel_data =
      {
        connections: ::Array[Knock::Models::SlackChannelData::connection],
        token: Knock::Models::SlackChannelData::Token?
      }

    class SlackChannelData < Knock::BaseModel
      attr_accessor connections: ::Array[Knock::Models::SlackChannelData::connection]

      attr_accessor token: Knock::Models::SlackChannelData::Token?

      def initialize:
        (
          connections: ::Array[Knock::Models::SlackChannelData::connection],
          token: Knock::Models::SlackChannelData::Token?
        ) -> void
        | (?Knock::Models::slack_channel_data | Knock::BaseModel data) -> void

      def to_hash: -> Knock::Models::slack_channel_data

      type connection =
        Knock::Models::SlackChannelData::Connection::SlackTokenConnection
        | Knock::Models::SlackChannelData::Connection::SlackIncomingWebhookConnection

      class Connection < Knock::Union
        type slack_token_connection =
          { access_token: String?, channel_id: String?, user_id: String? }

        class SlackTokenConnection < Knock::BaseModel
          attr_accessor access_token: String?

          attr_accessor channel_id: String?

          attr_accessor user_id: String?

          def initialize:
            (
              access_token: String?,
              channel_id: String?,
              user_id: String?
            ) -> void
            | (
              ?Knock::Models::SlackChannelData::Connection::slack_token_connection
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::SlackChannelData::Connection::slack_token_connection
        end

        type slack_incoming_webhook_connection = { url: String }

        class SlackIncomingWebhookConnection < Knock::BaseModel
          attr_accessor url: String

          def initialize:
            (url: String) -> void
            | (
              ?Knock::Models::SlackChannelData::Connection::slack_incoming_webhook_connection
              | Knock::BaseModel data
            ) -> void

          def to_hash: -> Knock::Models::SlackChannelData::Connection::slack_incoming_webhook_connection
        end

        private def self.variants: -> [[nil, Knock::Models::SlackChannelData::Connection::SlackTokenConnection], [nil, Knock::Models::SlackChannelData::Connection::SlackIncomingWebhookConnection]]
      end

      type token = { access_token: String? }

      class Token < Knock::BaseModel
        attr_accessor access_token: String?

        def initialize:
          (access_token: String?) -> void
          | (
            ?Knock::Models::SlackChannelData::token | Knock::BaseModel data
          ) -> void

        def to_hash: -> Knock::Models::SlackChannelData::token
      end
    end
  end
end
