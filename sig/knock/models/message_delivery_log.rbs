module Knock
  module Models
    type message_delivery_log =
      {
        id: String,
        _typename: String,
        environment_id: String,
        inserted_at: String,
        request: Knock::Models::MessageDeliveryLog::Request,
        response: Knock::Models::MessageDeliveryLog::Response,
        service_name: String
      }

    class MessageDeliveryLog < Knock::BaseModel
      attr_accessor id: String

      attr_accessor _typename: String

      attr_accessor environment_id: String

      attr_accessor inserted_at: String

      attr_accessor request: Knock::Models::MessageDeliveryLog::Request

      attr_accessor response: Knock::Models::MessageDeliveryLog::Response

      attr_accessor service_name: String

      def initialize:
        (
          id: String,
          _typename: String,
          environment_id: String,
          inserted_at: String,
          request: Knock::Models::MessageDeliveryLog::Request,
          response: Knock::Models::MessageDeliveryLog::Response,
          service_name: String
        ) -> void
        | (?Knock::Models::message_delivery_log | Knock::BaseModel data) -> void

      def to_hash: -> Knock::Models::message_delivery_log

      type request =
        {
          body: Knock::Models::MessageDeliveryLog::Request::body,
          headers: ::Hash[Symbol, top]?,
          host: String,
          method_: Knock::Models::MessageDeliveryLog::Request::method_,
          path: String,
          query: String?
        }

      class Request < Knock::BaseModel
        attr_reader body: Knock::Models::MessageDeliveryLog::Request::body?

        def body=: (
          Knock::Models::MessageDeliveryLog::Request::body
        ) -> Knock::Models::MessageDeliveryLog::Request::body

        attr_accessor headers: ::Hash[Symbol, top]?

        attr_reader host: String?

        def host=: (String) -> String

        attr_reader method_: Knock::Models::MessageDeliveryLog::Request::method_?

        def method_=: (
          Knock::Models::MessageDeliveryLog::Request::method_
        ) -> Knock::Models::MessageDeliveryLog::Request::method_

        attr_reader path: String?

        def path=: (String) -> String

        attr_accessor query: String?

        def initialize:
          (
            body: Knock::Models::MessageDeliveryLog::Request::body,
            headers: ::Hash[Symbol, top]?,
            host: String,
            method_: Knock::Models::MessageDeliveryLog::Request::method_,
            path: String,
            query: String?
          ) -> void
          | (
            ?Knock::Models::MessageDeliveryLog::request | Knock::BaseModel data
          ) -> void

        def to_hash: -> Knock::Models::MessageDeliveryLog::request

        type body = String | ::Hash[Symbol, top]

        class Body < Knock::Union
          type union_member1_map = ::Hash[Symbol, top]

          UnionMember1Map: union_member1_map

          private def self.variants: -> [[nil, String], [nil, ::Hash[Symbol, top]]]
        end

        type method_ = :GET | :POST | :PUT | :DELETE | :PATCH

        class Method < Knock::Enum
          GET: :GET
          POST: :POST
          PUT: :PUT
          DELETE: :DELETE
          PATCH: :PATCH

          def self.values: -> ::Array[Knock::Models::MessageDeliveryLog::Request::method_]
        end
      end

      type response =
        {
          body: Knock::Models::MessageDeliveryLog::Response::body,
          headers: ::Hash[Symbol, top]?,
          status: Integer
        }

      class Response < Knock::BaseModel
        attr_reader body: Knock::Models::MessageDeliveryLog::Response::body?

        def body=: (
          Knock::Models::MessageDeliveryLog::Response::body
        ) -> Knock::Models::MessageDeliveryLog::Response::body

        attr_accessor headers: ::Hash[Symbol, top]?

        attr_reader status: Integer?

        def status=: (Integer) -> Integer

        def initialize:
          (
            body: Knock::Models::MessageDeliveryLog::Response::body,
            headers: ::Hash[Symbol, top]?,
            status: Integer
          ) -> void
          | (
            ?Knock::Models::MessageDeliveryLog::response | Knock::BaseModel data
          ) -> void

        def to_hash: -> Knock::Models::MessageDeliveryLog::response

        type body = String | ::Hash[Symbol, top]

        class Body < Knock::Union
          type union_member1_map = ::Hash[Symbol, top]

          UnionMember1Map: union_member1_map

          private def self.variants: -> [[nil, String], [nil, ::Hash[Symbol, top]]]
        end
      end
    end
  end
end
