module Knock
  module Models
    type schedule_repeat_rule =
      {
        _typename: String,
        frequency: Knock::Models::ScheduleRepeatRule::frequency,
        day_of_month: Integer?,
        days: ::Array[Knock::Models::ScheduleRepeatRule::day]?,
        hours: Integer?,
        interval: Integer,
        minutes: Integer?
      }

    class ScheduleRepeatRule < Knock::BaseModel
      attr_accessor _typename: String

      attr_accessor frequency: Knock::Models::ScheduleRepeatRule::frequency

      attr_accessor day_of_month: Integer?

      attr_accessor days: ::Array[Knock::Models::ScheduleRepeatRule::day]?

      attr_accessor hours: Integer?

      attr_reader interval: Integer?

      def interval=: (Integer) -> Integer

      attr_accessor minutes: Integer?

      def initialize:
        (
          _typename: String,
          frequency: Knock::Models::ScheduleRepeatRule::frequency,
          day_of_month: Integer?,
          days: ::Array[Knock::Models::ScheduleRepeatRule::day]?,
          hours: Integer?,
          interval: Integer,
          minutes: Integer?
        ) -> void
        | (?Knock::Models::schedule_repeat_rule | Knock::BaseModel data) -> void

      def to_hash: -> Knock::Models::schedule_repeat_rule

      type frequency = :daily | :weekly | :monthly | :hourly

      class Frequency < Knock::Enum
        DAILY: :daily
        WEEKLY: :weekly
        MONTHLY: :monthly
        HOURLY: :hourly

        def self.values: -> ::Array[Knock::Models::ScheduleRepeatRule::frequency]
      end

      type day = :mon | :tue | :wed | :thu | :fri | :sat | :sun

      class Day < Knock::Enum
        MON: :mon
        TUE: :tue
        WED: :wed
        THU: :thu
        FRI: :fri
        SAT: :sat
        SUN: :sun

        def self.values: -> ::Array[Knock::Models::ScheduleRepeatRule::day]
      end
    end
  end
end
