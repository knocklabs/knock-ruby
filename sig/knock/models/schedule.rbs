module Knock
  module Models
    type schedule =
      {
        id: String,
        inserted_at: Time,
        recipient: Knock::Models::recipient,
        repeats: ::Array[Knock::Models::ScheduleRepeatRule],
        updated_at: Time,
        workflow: String,
        _typename: String,
        actor: Knock::Models::recipient?,
        data: ::Hash[Symbol, top]?,
        last_occurrence_at: Time?,
        next_occurrence_at: Time?,
        tenant: String?
      }

    class Schedule < Knock::BaseModel
      attr_accessor id: String

      attr_accessor inserted_at: Time

      attr_accessor recipient: Knock::Models::recipient

      attr_accessor repeats: ::Array[Knock::Models::ScheduleRepeatRule]

      attr_accessor updated_at: Time

      attr_accessor workflow: String

      attr_reader _typename: String?

      def _typename=: (String) -> String

      attr_accessor actor: Knock::Models::recipient?

      attr_accessor data: ::Hash[Symbol, top]?

      attr_accessor last_occurrence_at: Time?

      attr_accessor next_occurrence_at: Time?

      attr_accessor tenant: String?

      def initialize:
        (
          id: String,
          inserted_at: Time,
          recipient: Knock::Models::recipient,
          repeats: ::Array[Knock::Models::ScheduleRepeatRule],
          updated_at: Time,
          workflow: String,
          _typename: String,
          actor: Knock::Models::recipient?,
          data: ::Hash[Symbol, top]?,
          last_occurrence_at: Time?,
          next_occurrence_at: Time?,
          tenant: String?
        ) -> void
        | (?Knock::Models::schedule | Knock::BaseModel data) -> void

      def to_hash: -> Knock::Models::schedule
    end
  end
end
