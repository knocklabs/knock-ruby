module Knock
  module Resources
    class Objects
      attr_reader bulk: Knock::Resources::Objects::Bulk

      def list:
        (
          String collection,
          ?Knock::Models::ObjectListParams | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::Object]
        | (
          String collection,
          after: String,
          before: String,
          page_size: Integer,
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::Object]

      def delete:
        (
          String id,
          Knock::Models::ObjectDeleteParams | ::Hash[Symbol, top] params
        ) -> String
        | (
          String id,
          collection: String,
          request_options: Knock::request_opts
        ) -> String

      def add_subscriptions:
        (
          String object_id_,
          Knock::Models::ObjectAddSubscriptionsParams
          | ::Hash[Symbol, top] params
        ) -> Knock::Models::object_add_subscriptions_response
        | (
          String object_id_,
          collection: String,
          recipients: ::Array[Knock::Models::recipient_request],
          properties: ::Hash[Symbol, top]?,
          request_options: Knock::request_opts
        ) -> Knock::Models::object_add_subscriptions_response

      def delete_subscriptions:
        (
          String object_id_,
          Knock::Models::ObjectDeleteSubscriptionsParams
          | ::Hash[Symbol, top] params
        ) -> Knock::Models::object_delete_subscriptions_response
        | (
          String object_id_,
          collection: String,
          recipients: ::Array[Knock::Models::recipient_request],
          request_options: Knock::request_opts
        ) -> Knock::Models::object_delete_subscriptions_response

      def get:
        (
          String id,
          Knock::Models::ObjectGetParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::Object
        | (
          String id,
          collection: String,
          request_options: Knock::request_opts
        ) -> Knock::Models::Object

      def get_channel_data:
        (
          String channel_id,
          Knock::Models::ObjectGetChannelDataParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::ChannelData
        | (
          String channel_id,
          collection: String,
          object_id_: String,
          request_options: Knock::request_opts
        ) -> Knock::Models::ChannelData

      def get_preferences:
        (
          String id,
          Knock::Models::ObjectGetPreferencesParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::PreferenceSet
        | (
          String id,
          collection: String,
          object_id_: String,
          tenant: String,
          request_options: Knock::request_opts
        ) -> Knock::Models::PreferenceSet

      def list_messages:
        (
          String id,
          Knock::Models::ObjectListMessagesParams | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::ObjectListMessagesResponse]
        | (
          String id,
          collection: String,
          after: String,
          before: String,
          channel_id: String,
          engagement_status: ::Array[Knock::Models::ObjectListMessagesParams::engagement_status],
          message_ids: ::Array[String],
          page_size: Integer,
          source: String,
          status: ::Array[Knock::Models::ObjectListMessagesParams::status],
          tenant: String,
          trigger_data: String,
          workflow_categories: ::Array[String],
          workflow_recipient_run_id: String,
          workflow_run_id: String,
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::ObjectListMessagesResponse]

      def list_preferences:
        (
          String object_id_,
          Knock::Models::ObjectListPreferencesParams
          | ::Hash[Symbol, top] params
        ) -> Knock::Models::object_list_preferences_response
        | (
          String object_id_,
          collection: String,
          request_options: Knock::request_opts
        ) -> Knock::Models::object_list_preferences_response

      def list_schedules:
        (
          String id,
          Knock::Models::ObjectListSchedulesParams | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::Schedule]
        | (
          String id,
          collection: String,
          after: String,
          before: String,
          page_size: Integer,
          tenant: String,
          workflow: String,
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::Schedule]

      def list_subscriptions:
        (
          String object_id_,
          Knock::Models::ObjectListSubscriptionsParams
          | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::Subscription]
        | (
          String object_id_,
          collection: String,
          after: String,
          before: String,
          mode: Knock::Models::ObjectListSubscriptionsParams::mode,
          page_size: Integer,
          recipients: ::Array[Knock::Models::ObjectListSubscriptionsParams::recipient],
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::Subscription]

      def set:
        (
          String id,
          Knock::Models::ObjectSetParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::Object
        | (
          String id,
          collection: String,
          channel_data: Knock::Models::inline_channel_data_request?,
          preferences: Knock::Models::inline_preference_set_request?,
          request_options: Knock::request_opts
        ) -> Knock::Models::Object

      def set_channel_data:
        (
          String channel_id,
          Knock::Models::ObjectSetChannelDataParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::ChannelData
        | (
          String channel_id,
          collection: String,
          object_id_: String,
          data: Knock::Models::ChannelDataRequest::data,
          request_options: Knock::request_opts
        ) -> Knock::Models::ChannelData

      def set_preferences:
        (
          String id,
          Knock::Models::ObjectSetPreferencesParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::PreferenceSet
        | (
          String id,
          collection: String,
          object_id_: String,
          categories: ::Hash[Symbol, Knock::Models::PreferenceSetRequest::category]?,
          channel_types: Knock::Models::PreferenceSetChannelTypes?,
          workflows: ::Hash[Symbol, Knock::Models::PreferenceSetRequest::workflow]?,
          request_options: Knock::request_opts
        ) -> Knock::Models::PreferenceSet

      def unset_channel_data:
        (
          String channel_id,
          Knock::Models::ObjectUnsetChannelDataParams
          | ::Hash[Symbol, top] params
        ) -> String
        | (
          String channel_id,
          collection: String,
          object_id_: String,
          request_options: Knock::request_opts
        ) -> String

      def initialize: (client: Knock::Client) -> void
    end
  end
end
