module Knock
  module Resources
    class Users
      attr_reader feeds: Knock::Resources::Users::Feeds

      attr_reader bulk: Knock::Resources::Users::Bulk

      def update:
        (
          String user_id,
          ?Knock::Models::UserUpdateParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::User
        | (
          String user_id,
          channel_data: Knock::Models::inline_channel_data_request?,
          created_at: Time?,
          preferences: Knock::Models::inline_preference_set_request?,
          request_options: Knock::request_opts
        ) -> Knock::Models::User

      def list:
        (
          ?Knock::Models::UserListParams | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::User]
        | (
          after: String,
          before: String,
          page_size: Integer,
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::User]

      def delete:
        (
          String user_id,
          ?Knock::Models::UserDeleteParams | ::Hash[Symbol, top] params
        ) -> String
        | (String user_id, request_options: Knock::request_opts) -> String

      def get:
        (
          String user_id,
          ?Knock::Models::UserGetParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::User
        | (
          String user_id,
          request_options: Knock::request_opts
        ) -> Knock::Models::User

      def get_channel_data:
        (
          String channel_id,
          Knock::Models::UserGetChannelDataParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::ChannelData
        | (
          String channel_id,
          user_id: String,
          request_options: Knock::request_opts
        ) -> Knock::Models::ChannelData

      def get_preferences:
        (
          String id,
          Knock::Models::UserGetPreferencesParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::PreferenceSet
        | (
          String id,
          user_id: String,
          tenant: String,
          request_options: Knock::request_opts
        ) -> Knock::Models::PreferenceSet

      def list_messages:
        (
          String user_id,
          ?Knock::Models::UserListMessagesParams | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::UserListMessagesResponse]
        | (
          String user_id,
          after: String,
          before: String,
          channel_id: String,
          engagement_status: ::Array[Knock::Models::UserListMessagesParams::engagement_status],
          message_ids: ::Array[String],
          page_size: Integer,
          source: String,
          status: ::Array[Knock::Models::UserListMessagesParams::status],
          tenant: String,
          trigger_data: String,
          workflow_categories: ::Array[String],
          workflow_recipient_run_id: String,
          workflow_run_id: String,
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::UserListMessagesResponse]

      def list_preferences:
        (
          String user_id,
          ?Knock::Models::UserListPreferencesParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::user_list_preferences_response
        | (
          String user_id,
          request_options: Knock::request_opts
        ) -> Knock::Models::user_list_preferences_response

      def list_schedules:
        (
          String user_id,
          ?Knock::Models::UserListSchedulesParams | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::Schedule]
        | (
          String user_id,
          after: String,
          before: String,
          page_size: Integer,
          tenant: String,
          workflow: String,
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::Schedule]

      def list_subscriptions:
        (
          String user_id,
          ?Knock::Models::UserListSubscriptionsParams
          | ::Hash[Symbol, top] params
        ) -> Knock::EntriesCursor[Knock::Models::Subscription]
        | (
          String user_id,
          after: String,
          before: String,
          page_size: Integer,
          request_options: Knock::request_opts
        ) -> Knock::EntriesCursor[Knock::Models::Subscription]

      def merge:
        (
          String user_id,
          Knock::Models::UserMergeParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::User
        | (
          String user_id,
          from_user_id: String,
          request_options: Knock::request_opts
        ) -> Knock::Models::User

      def set_channel_data:
        (
          String channel_id,
          Knock::Models::UserSetChannelDataParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::ChannelData
        | (
          String channel_id,
          user_id: String,
          data: Knock::Models::ChannelDataRequest::data,
          request_options: Knock::request_opts
        ) -> Knock::Models::ChannelData

      def set_preferences:
        (
          String id,
          Knock::Models::UserSetPreferencesParams | ::Hash[Symbol, top] params
        ) -> Knock::Models::PreferenceSet
        | (
          String id,
          user_id: String,
          categories: ::Hash[Symbol, Knock::Models::PreferenceSetRequest::category]?,
          channel_types: Knock::Models::PreferenceSetChannelTypes?,
          workflows: ::Hash[Symbol, Knock::Models::PreferenceSetRequest::workflow]?,
          request_options: Knock::request_opts
        ) -> Knock::Models::PreferenceSet

      def unset_channel_data:
        (
          String channel_id,
          Knock::Models::UserUnsetChannelDataParams | ::Hash[Symbol, top] params
        ) -> String
        | (
          String channel_id,
          user_id: String,
          request_options: Knock::request_opts
        ) -> String

      def initialize: (client: Knock::Client) -> void
    end
  end
end
