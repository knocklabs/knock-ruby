module Knock
  module Converter
    type input = Knock::Converter | Class

    def coerce: (top value) -> top

    def dump: (top value) -> top

    def try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])

    def self.type_info: (
      {
        const: (nil | bool | Integer | Float | Symbol)?,
        enum: ^-> Knock::Converter::input?,
        union: ^-> Knock::Converter::input?
      }
      | ^-> Knock::Converter::input
      | Knock::Converter::input spec
    ) -> (^-> top)

    def self.coerce: (Knock::Converter::input target, top value) -> top

    def self.dump: (Knock::Converter::input target, top value) -> top

    def self.try_strict_coerce: (
      Knock::Converter::input target,
      top value
    ) -> top
  end

  class Unknown
    extend Knock::Converter

    def self.===: (top other) -> bool

    def self.==: (top other) -> bool

    def self.coerce: (top value) -> top

    def self.dump: (top value) -> top

    def self.try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])
  end

  class BooleanModel
    extend Knock::Converter

    def self.===: (top other) -> bool

    def self.==: (top other) -> bool

    def self.coerce: (bool | top value) -> (bool | top)

    def self.dump: (bool | top value) -> (bool | top)

    def self.try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])
  end

  class Enum
    extend Knock::Converter

    def self.values: -> ::Array[(nil | bool | Integer | Float | Symbol)]

    private def self.finalize!: -> void

    def self.===: (top other) -> bool

    def self.==: (top other) -> bool

    def self.coerce: (String | Symbol | top value) -> (Symbol | top)

    def self.dump: (Symbol | top value) -> (Symbol | top)

    def self.try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])
  end

  class Union
    extend Knock::Converter

    private def self.known_variants: -> ::Array[[Symbol?, Proc]]

    def self.variants: -> ::Array[[Symbol?, top]]

    private def self.discriminator: (Symbol property) -> void

    private def self.variant: (
      Symbol
      | ::Hash[Symbol, top]
      | ^-> Knock::Converter::input
      | Knock::Converter::input key,
      ?::Hash[Symbol, top]
      | ^-> Knock::Converter::input
      | Knock::Converter::input spec
    ) -> void

    private def self.resolve_variant: (top value) -> Knock::Converter::input?

    def self.===: (top other) -> bool

    def self.==: (top other) -> bool

    def self.coerce: (top value) -> top

    def self.dump: (top value) -> top

    def self.try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])
  end

  class ArrayOf
    include Knock::Converter

    def ===: (top other) -> bool

    def ==: (top other) -> bool

    def coerce: (Enumerable[top] | top value) -> (::Array[top] | top)

    def dump: (Enumerable[top] | top value) -> (::Array[top] | top)

    def try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])

    def item_type: -> Knock::Converter::input

    def initialize: (
      ::Hash[Symbol, top]
      | ^-> Knock::Converter::input
      | Knock::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void
  end

  class HashOf
    include Knock::Converter

    def ===: (top other) -> bool

    def ==: (top other) -> bool

    def coerce: (::Hash[top, top] | top value) -> (::Hash[Symbol, top] | top)

    def dump: (::Hash[top, top] | top value) -> (::Hash[Symbol, top] | top)

    def try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])

    def item_type: -> Knock::Converter::input

    def initialize: (
      ::Hash[Symbol, top]
      | ^-> Knock::Converter::input
      | Knock::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void
  end

  class BaseModel
    extend Knock::Converter

    type known_field = { mode: (:coerce | :dump)?, required: bool }

    def self.known_fields: -> ::Hash[Symbol, (Knock::BaseModel::known_field
    & { type_fn: (^-> Knock::Converter::input) })]

    def self.fields: -> ::Hash[Symbol, (Knock::BaseModel::known_field
    & { type: Knock::Converter::input })]

    def self.defaults: -> ::Hash[Symbol, (^-> Class)]

    private def self.add_field: (
      Symbol name_sym,
      required: bool,
      type_info: {
        const: (nil | bool | Integer | Float | Symbol)?,
        enum: ^-> Knock::Converter::input?,
        union: ^-> Knock::Converter::input?,
        api_name: Symbol
      }
      | ^-> Knock::Converter::input
      | Knock::Converter::input,
      spec: ::Hash[Symbol, top]
    ) -> void

    def self.required: (
      Symbol name_sym,
      ::Hash[Symbol, top]
      | ^-> Knock::Converter::input
      | Knock::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void

    def self.optional: (
      Symbol name_sym,
      ::Hash[Symbol, top]
      | ^-> Knock::Converter::input
      | Knock::Converter::input type_info,
      ?::Hash[Symbol, top] spec
    ) -> void

    private def self.request_only: { -> void } -> void

    private def self.response_only: { -> void } -> void

    def ==: (top other) -> bool

    def self.coerce: (
      Knock::BaseModel | ::Hash[top, top] | top value
    ) -> (instance | top)

    def self.dump: (instance | top value) -> (::Hash[top, top] | top)

    def self.try_strict_coerce: (
      top value
    ) -> ([true, top, nil] | [false, bool, Integer])

    def []: (Symbol key) -> top?

    def to_h: -> ::Hash[Symbol, top]

    alias to_hash to_h

    def deconstruct_keys: (::Array[Symbol]? keys) -> ::Hash[Symbol, top]

    def initialize: (?::Hash[Symbol, top] | self data) -> void

    def to_s: -> String

    def inspect: -> String
  end
end
